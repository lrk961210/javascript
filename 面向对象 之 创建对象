创建对象：
1.利用new Object() 创建
```
var person = new Object();
    person.name = "aaa";
    
    person.sayname = function(){
        alert("this.name");
    };
```

2、字面量创建
```
var person ={
  name : "aaa",
  
  sayname : function(){
      alert(this.name);
  }
};
```

3、工厂模式 -- 用函数来封装以特定接口创建对象的细节
   创建俩个同类对象比上面节省代码
   其实就是new Object() 的封装
   
   存在问题：无法判断对象类型（都是object对象）

```
function createPerson(name, age, job){

	var o = new Object();
	o.name = name;
  
	o.sayName = function(){
		alert(this.name);
	};
	return o;
}

var person1 = createPerson("Nicholas", 29, "Software Engineer");
var person2 = createPerson("Greg", 27, "Doctor"); 

```

4、构造函数模式

缺点：同一个function的重复定义
```
function Person(name){
	this.name = name;

	this.sayName = function(){
	    alert(this.name);
	};
} 
var person1 = new Person("Nicholas");
var person2 = new Person("Greg"); 

```

5、原型模式
缺点：函数共享好事，所有属性共享坏事
```
function Person(){
    //构造函数 与原型一起使用可克服共享过度的缺点
}
Person.prototype.name = "Nicholas";
Person.prototype.age = 29;
Person.prototype.job = "Software Engineer";
Person.prototype.sayName = function(){
    alert(this.name);
};

var person1 = new Person();
person1.sayName(); 

var person2 = new Person(); 
person2.sayName(); //"Nicholas"

alert(person1.sayName == person2.sayName); //true
```

当然也可以用字面量来设置原型,不过Person.prototype. constructor指向object了。instanceof正常

```
function Person(){
}
Person.prototype = {
	constructor : Person,
	name : "Nicholas",

	sayName : function () {
	    alert(this.name);
	}
}; 
```

6、动态原型模式
   把原型放在构造函数里面，动态判断是否要设置。。。
```
function Person(name){
    //属性
    this.name = name;

    //方法 这里不能用字面量写
    if (typeof this.sayName != "function"){

	Person.prototype.sayName = function(){
	    alert(this.name);
	};

    }
}

var friend = new Person("Nicholas");
friend.sayName(); 

```
