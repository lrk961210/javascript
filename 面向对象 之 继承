1、原型链继承
缺点：继承的方法 属性都共享了
```
 function SuperType(){
            this.property = true;
        }
        
        SuperType.prototype.getSuperValue = function(){
            return this.property;
        };
        
        function SubType(){
            this.subproperty = false;
        }
        
        //  继 承 SuperType； 继承了 所有 属性方法，这些属性方法变成了原型属性了（即共享）
        SubType.prototype = new SuperType();
        
        //  给 原型添加方法 要放在 继承 后面； 并且不要用字面量创建
        SubType.prototype.getSubValue = function (){
            return this.subproperty;
        };
}
```

2、借用构造函数

```
function SuperType(){
    this.colors = ["red", "blue", "green"];
}
function SubType(){  
  //使用 call 在构造函数里面 继承；获得 构造函数 里面的东西；无法继承 原型 里面的东西
  //这不就是在里面调用父函数吗。。。只是改变了this而已
  SuperType.call(this);
}

var instance1 = new SubType();

```

3、 验证一下俩种继承继承了什么？？？？？
